#include <WiFi.h>
#include <PubSubClient.h>
#include <HX711.h>
#include <ArduinoJson.h>

// Configurações de WiFi
const char *SSID = "Wokwi-GUEST";
const char *PASSWORD = "";  // Substitua pelo sua senha

// Configurações de MQTT
const char *BROKER_MQTT = "broker.hivemq.com";
const int BROKER_PORT = 1883;
const char *ID_MQTT = "teste_mqtt";
const char *TOPIC_PUBLISH_POTENTIOMETER = "FIAP/CP/Agua";
const char *TOPIC_PUBLISH_PIR = "FIAP/CP/PIR";
const char *TOPIC_PUBLISH_WEIGHT = "FIAP/CP/Weight";

// Pino do potenciômetro
const int POTENTIOMETER_PIN = 36;

// Pino do sensor PIR
const int PIR_PIN = 13;

// Pinos do módulo HX711 (DT, SCK)
const int HX711_DT_PIN = 2;
const int HX711_SCK_PIN = 4;

// Variáveis globais
WiFiClient espClient;
PubSubClient MQTT(espClient);
HX711 scale;

// Configuração da escala para converter a leitura em kg
const float SCALE = 420.0;  // Valor inicial, ajuste conforme necessário

// Intervalo de leitura do peso (em kg)
#define MIN_WEIGHT 0.0
#define MAX_WEIGHT 5.0

const int TAMANHO = 200;

int lastPotValue = -1;

// Protótipos de funções
void initWiFi();
void initMQTT();
void callbackMQTT(char *topic, byte *payload, unsigned int length);
void reconnectMQTT();
void reconnectWiFi();
void checkWiFIAndMQTT();
void updatePotentiometerValue();
void updatePIRState();
void updateWeight();

void initWiFi() {
  Serial.print("Conectando com a rede: ");
  Serial.println(SSID);
  WiFi.begin(SSID, PASSWORD);

  while (WiFi.status() != WL_CONNECTED) {
    delay(100);
    Serial.print(".");
  }

  Serial.println();
  Serial.print("Conectado com sucesso: ");
  Serial.println(SSID);
  Serial.print("IP: ");
  Serial.println(WiFi.localIP());
}

void initMQTT() {
  MQTT.setServer(BROKER_MQTT, BROKER_PORT);
  MQTT.setCallback(callbackMQTT);
}

void callbackMQTT(char *topic, byte *payload, unsigned int length) {
  String msg = String((char *)payload).substring(0, length);
  Serial.printf("Mensagem recebida via MQTT: %s do tópico: %s\n", msg.c_str(), topic);
}

void reconnectMQTT() {
  while (!MQTT.connected()) {
    Serial.print("Tentando conectar com o Broker MQTT: ");
    Serial.println(BROKER_MQTT);

    if (MQTT.connect(ID_MQTT)) {
      Serial.println("Conectado ao broker MQTT!");
    } else {
      Serial.println("Falha na conexão com MQTT. Tentando novamente em 2 segundos.");
      delay(2000);
    }
  }
}

void checkWiFIAndMQTT() {
  if (WiFi.status() != WL_CONNECTED) reconnectWiFi();
  if (!MQTT.connected()) reconnectMQTT();
}

void reconnectWiFi(void) {
  if (WiFi.status() == WL_CONNECTED)
    return;

  WiFi.begin(SSID, PASSWORD);

  while (WiFi.status() != WL_CONNECTED) {
    delay(100);
    Serial.print(".");
  }

  Serial.println();
  Serial.print("Wifi conectado com sucesso");
  Serial.print(SSID);
  Serial.println("IP: ");
  Serial.println(WiFi.localIP());
}


void updatePotentiometerValue() {
  int potValue = analogRead(POTENTIOMETER_PIN);

  // Converte a leitura do potenciômetro para ml (intervalo de 100 a 4000)
  int mlValue = map(potValue, 0, 4095, 100, 4000);

  // Imprime a mensagem indicando a alteração e mostrando o valor
  if (mlValue != lastPotValue) {
    Serial.printf("Potenciômetro alterado: %d ml\n", mlValue);

    // Atualização do valor do potenciômetro no MQTT
    char buffer[TAMANHO];
    snprintf(buffer, TAMANHO, "{\"agua\":%d}", mlValue);
    MQTT.publish(TOPIC_PUBLISH_POTENTIOMETER, buffer);

    lastPotValue = mlValue;
  }
}

void updatePIRState() {
  int pirState = digitalRead(PIR_PIN);

  // Adição da lógica de impressão de mensagens
  if (pirState == 0) {
    Serial.println("Movimento não detectado");
  } else {
    Serial.println("Movimento detectado");
  }
  
  // Atualização do estado do sensor PIR no MQTT
  StaticJsonDocument<TAMANHO> doc;
  doc["mov"] = pirState;

  char buffer[TAMANHO];
  snprintf(buffer, TAMANHO, "{\"PIR\":%d}", pirState);
  serializeJson(doc, buffer);

  MQTT.publish(TOPIC_PUBLISH_PIR, buffer);
  Serial.println(buffer);
}

void updateWeight() {
  // Leitura do sensor de peso (módulo HX711)
  float weightValue = scale.read() / SCALE;

  // Limita o valor nos intervalos definidos
  weightValue = constrain(weightValue, MIN_WEIGHT, MAX_WEIGHT);

  // Imprime a mensagem correspondente
  Serial.printf("Valor do peso: %.2f kg\n", weightValue);

  // Atualização do valor do peso no MQTT
  StaticJsonDocument<TAMANHO> doc;
  doc["weight"] = weightValue;
  
  char buffer[TAMANHO];
  serializeJson(doc, buffer);
  //snprintf(buffer, TAMANHO, "{\"distance\":%.2f}", weightValue);
  MQTT.publish(TOPIC_PUBLISH_WEIGHT, buffer);
  Serial.println(buffer);
}

void setup() {
  Serial.begin(115200);

  pinMode(PIR_PIN, INPUT);

  // Inicialização do módulo HX711
  scale.begin(HX711_DT_PIN, HX711_SCK_PIN);

  initWiFi();
  initMQTT();
}

void loop() {
  checkWiFIAndMQTT();
  MQTT.loop();
  updatePotentiometerValue();
  updatePIRState();
  updateWeight();

  // Adicione aqui outras funções necessárias para o seu aplicativo
  // ...

  delay(1000);
}
